/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 .\public\models\6841675a0a3a6091cd330a41.glb 
*/

import React, { useRef, useEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useFBX } from '@react-three/drei'
import { useControls } from 'leva'
import * as THREE from 'three'

export function Avatar(props) {
    const { animations } = props
    
    // 简化控制参数
    const { 
        headFollow, 
        wireframe,
        wireframeColor,
    } = useControls({
        headFollow: true,
        wireframe: false,
        wireframeColor: '#00a2ff',
    })

    // 创建一个引用，用于访问和操作3D对象
    const group = useRef()
    
    // 加载GLB模型
    const { scene } = useGLTF('models/6841675a0a3a6091cd330a41.glb')
    
    // 克隆模型场景，避免多个实例共享同一个骨架
    const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
    
    // 从克隆的场景中提取节点和材质
    const { nodes, materials } = useGraph(clone)
    
    // 加载动画FBX文件
    const { animations: walkAnimation } = useFBX('animations/walk.fbx')
    const { animations: standingAnimation } = useFBX('animations/standing.fbx')
    const { animations: fallingAnimation } = useFBX('animations/falling.fbx')
    
    // 设置动画名称
    walkAnimation[0].name = 'walk'
    standingAnimation[0].name = 'standing'
    fallingAnimation[0].name = 'falling'
    
    // 使用useMemo缓存合并的动画，避免重复创建
    const allAnimations = React.useMemo(() => {
        return [
            ...walkAnimation,
            ...standingAnimation,
            ...fallingAnimation
        ]
    }, [walkAnimation, standingAnimation, fallingAnimation])
    
    // 设置动画控制器
    const { actions } = useAnimations(allAnimations, group)
    
    // 简化后的模型初始化
    useEffect(() => {
        if (!group.current) return;
        
        // 应用线框效果(如果启用)
        if (wireframe) {
            group.current.traverse((child) => {
                if (child.isMesh) {
                    child.material = new THREE.MeshStandardMaterial({
                        color: wireframeColor,
                        wireframe: true,
                    });
                }
            });
        }
    }, [wireframe, wireframeColor]);
    
    // 初始化动画
    useEffect(() => {
        if (!actions) return;
        
        // 初始化默认动画 (standing静止状态)
        if (actions['standing']) {
            actions['standing'].play();
        }
        
    }, [actions]);
    
    // 跟踪动画变化并切换
    useEffect(() => {
        if (!actions || !animations) return;
        
        const current = actions[animations];
        if (current) {
            // 停止所有动画
            Object.values(actions).forEach(action => action.stop());
            // 播放当前动画
            current.reset().play();
        }
    }, [animations, actions]);

    return (
        <group ref={group} {...props} dispose={null}
            // 调整模型位置 [x, y, z]
            // x: 左右位置（正值向右，负值向左）
            // y: 上下位置（正值向上，负值向下）
            // z: 前后位置（正值向前，负值向后）
            position={[0, -2, 0]} 
            
            // 调整模型大小 [x, y, z]
            // 正值为正常缩放，负值为镜像
            // 使用负值可以实现镜像效果
            scale={[-1.3, -1.3, -1.3]} 
            
            // 调整模型旋转 [x, y, z]（单位：弧度）
            // x: 前后倾斜（正值前倾，负值后仰）
            // y: 左右旋转（控制朝向）
            // z: 左右倾斜
            rotation={[-0.1, 0, 0]} 
        >
            <group rotation-x={Math.PI/2}>
        <primitive object={nodes.Hips} />
        <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
        <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
        <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
        <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
        <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
        <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
        <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
        <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
        <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
            </group>
        </group>
    )
}

// 预加载模型，提高性能
useGLTF.preload('models/6841675a0a3a6091cd330a41.glb')
